plugins {
    id 'java'
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'gradle-build-utils' version '1.5.3'
    id 'kibu-plugin-dev' version '0.5.1'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

Properties props = buildUtils.loadProperties('publish.properties')

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = project.maven_group
version = buildUtils.gitVersion()
archivesBaseName = project.archives_base_name

repositories {
    mavenCentral()

    maven {
        url "https://repo.lclpnet.work/repository/internal"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu:${project.kibu_version}"
    modImplementation "work.lclpnet.mods.kibu:kibu-plugins:${project.kibu_plugins_version}"

    /* other Java dependencies */
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.json:json:20230227'

    // bundle these dependencies
    'work.lclpnet:json-config4j:1.0.0'.with {
        implementation it
        bundle (it) { transitive = false }
    }

    "work.lclpnet:translations4j:${project.translations4j_version}".with {
        implementation it
        bundle (it) { transitive = false }
    }

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    // if you need to test with Minecraft classes, use this too:
    // testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
}

loom {
    // if you want to develop a plugin for dedicated servers, uncomment the following block
    /*serverOnlyMinecraftJar()

    runs {
        remove client
    }*/
}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", project.version

    filesMatching("plugin.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.convention(17)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    withSourcesJar()
}

[jar, shadowJar].each {
    it.from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    mergeServiceFiles()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            artifact remapJar
            artifact remapSourcesJar

            pom {
                name = 'Example Plugin'
                description = 'This is an example description! Tell everyone what your plugin is about!'
            }
        }
    }

    buildUtils.setupPublishRepository(repositories, props)
}